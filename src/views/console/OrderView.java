package views.console;

import controllers.OrderController;
import models.abstracts.AUser;
import models.enums.OrderStatus;
import models.enums.PaymentMethod;
import models.interfaces.IOrder;
import models.interfaces.IPizza;

import java.util.List;
import java.util.Objects;
import java.util.Scanner;
import java.util.stream.Collectors;

public class OrderView {
    private IOrder lastOrder;
    private final OrderController orderController;
    private final Scanner scanner;

    public OrderView(OrderController orderController) {
        this.orderController = orderController;
        this.scanner = new Scanner(System.in);
    }

    public void showBasket() {
        System.out.println("\n=== –ö–æ—Ä–∑–∏–Ω–∞ ===");
        orderController.getCurrentBasket().getPizzas().forEach(pizza ->
                System.out.printf("%s - %.2f —Ä—É–±.\n", pizza.getName(), pizza.getPrice())
        );
        System.out.printf("–ò—Ç–æ–≥–æ: %.2f —Ä—É–±.\n", orderController.getCurrentBasket().calcTotalPrice());
    }

    public void addPizza(IPizza pizza){
        this.orderController.addToBasket(pizza);
    }

    public void checkout(AUser user) {
        System.out.println("\n–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...");
        IOrder order = orderController.checkout(user);
        if (order != null) {
            System.out.printf("–ó–∞–∫–∞–∑ #%s —Å–æ–∑–¥–∞–Ω!\n", order.getId());
            pay(order);
        }
        this.lastOrder = order;
    }

    private void pay(IOrder order) {
        System.out.println("\n=== –û–ø–ª–∞—Ç–∞ ===");
        System.out.println("1. –ö–∞—Ä—Ç–æ–π");
        System.out.println("2. –ù–∞–ª–∏—á–Ω—ã–º–∏");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±: ");

        int choice = scanner.nextInt();
        PaymentMethod method = (choice == 1) ? PaymentMethod.CARD : PaymentMethod.CASH;

        orderController.pay(order, method);
        System.out.println("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
    }
    public void showReadyOrders(List<IOrder> readyOrders) {
        System.out.println("\n=== –ì–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–¥–∞—á–µ –∑–∞–∫–∞–∑—ã ===");
        readyOrders.forEach(order ->
                System.out.printf("#%s - %s\n", order.getId(), order.getStatus())
        );
    }

    public OrderController getOrderController() { // todo –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
        return orderController;
    }

    public void handleReadyOrder(IOrder order) {
        if(order == null) {
            System.out.println("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç");
            return;
        }
            System.out.println("\nüîî –í–∞—à –∑–∞–∫–∞–∑ #" + order.getId() + " –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ!");
            System.out.println("1. –ó–∞–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å");
            System.out.println("2. –ó–∞–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = scanner.nextInt();
            if (choice == 1) {
                if (Objects.equals(order.getStatus(), OrderStatus.READY.toString())) {
                    orderController.receiveOrder(order);
                } else {
                    System.out.println("–ó–∞–∫–∞–∑ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!");
                }
                receiveOrder(order);
            }
    }

    private void receiveOrder(IOrder order) {
        try {
            orderController.receiveOrder(order);
            System.out.println("‚úÖ –ó–∞–∫–∞–∑ #" + order.getId() + " –ø–æ–ª—É—á–µ–Ω!");
        } catch (IllegalStateException e) {
            System.out.println("‚ö† –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    public IOrder getLastOrder() {
        return lastOrder;
    }

    //    public void showMyOrders() {
//        List<IOrder> orders = orderController.getReadyOrders();
//        orders.forEach(order -> {
//            System.out.printf("#%s - %s (%s)\n",
//                    order.getId(),
//                    order.getStatus(),
//                    order.getBasket().getPizzas().stream()
//                            .map(IPizza::getName)
//                            .collect(Collectors.joining(", ")));
//        });
//    }
}
